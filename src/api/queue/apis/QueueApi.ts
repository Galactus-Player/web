/* tslint:disable */
/* eslint-disable */
/**
 * queueservice
 * Video queue service
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: sbirudavolu@umass.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddVideoRequest,
    AddVideoRequestFromJSON,
    AddVideoRequestToJSON,
    PlayVideo,
    PlayVideoFromJSON,
    PlayVideoToJSON,
    RemoveVideo,
    RemoveVideoFromJSON,
    RemoveVideoToJSON,
    Video,
    VideoFromJSON,
    VideoToJSON,
    VideoQueue,
    VideoQueueFromJSON,
    VideoQueueToJSON,
} from '../models';

export interface AddVideoOperationRequest {
    code: string;
    addVideoRequest?: AddVideoRequest;
}

export interface PlayVideoRequest {
    code: string;
    playVideo?: PlayVideo;
}

export interface RemoveVideoRequest {
    code: string;
    removeVideo?: RemoveVideo;
}

/**
 * 
 */
export class QueueApi extends runtime.BaseAPI {

    /**
     * Add video to the queue
     */
    async addVideoRaw(requestParameters: AddVideoOperationRequest): Promise<runtime.ApiResponse<Video>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling addVideo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/queue/{code}/add`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddVideoRequestToJSON(requestParameters.addVideoRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoFromJSON(jsonValue));
    }

    /**
     * Add video to the queue
     */
    async addVideo(requestParameters: AddVideoOperationRequest): Promise<Video> {
        const response = await this.addVideoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Move video to top of queue
     */
    async playVideoRaw(requestParameters: PlayVideoRequest): Promise<runtime.ApiResponse<VideoQueue>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling playVideo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/queue/{code}/play`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlayVideoToJSON(requestParameters.playVideo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoQueueFromJSON(jsonValue));
    }

    /**
     * Move video to top of queue
     */
    async playVideo(requestParameters: PlayVideoRequest): Promise<VideoQueue> {
        const response = await this.playVideoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove video from the queue
     */
    async removeVideoRaw(requestParameters: RemoveVideoRequest): Promise<runtime.ApiResponse<RemoveVideo>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling removeVideo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/queue/{code}/remove`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveVideoToJSON(requestParameters.removeVideo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveVideoFromJSON(jsonValue));
    }

    /**
     * Remove video from the queue
     */
    async removeVideo(requestParameters: RemoveVideoRequest): Promise<RemoveVideo> {
        const response = await this.removeVideoRaw(requestParameters);
        return await response.value();
    }

}

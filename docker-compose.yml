version: "2.1"
networks:
  galactusnet:
    driver: bridge

services:
  postgres_host:
    image: postgres
    expose:
      - "5432"
    environment:
      - POSTGRES_PASSWORD=postgres
    networks:
      - galactusnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  room:
    image: docker.pkg.github.com/galactus-player/roomservice/galactusroom
    expose:
      - "8080"
    restart: always
    networks:
      - galactusnet
    depends_on:
      postgres_host:
        condition: service_healthy

  mongo_host:
    image: mongo
    restart: always
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: secret
    networks:
      - galactusnet

  queue:
    image: docker.pkg.github.com/galactus-player/queueservice/galactusqueue
    expose:
      - "9090"
    restart: always
    networks:
      - galactusnet

  sync:
    image: docker.pkg.github.com/galactus-player/sync-service/galactussync
    expose:
      - "9595"
    networks:
      - galactusnet

  web:
    image: docker.pkg.github.com/galactus-player/web/galactusweb:staging
    expose:
      - "3000"
    depends_on:
      - room
      - sync
    restart: always
    networks:
      - galactusnet

  reverseproxy:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    depends_on:
      - web
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - galactusnet

  certbot:
    image: certbot/certbot
    restart: always
    networks:
      - galactusnet
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

